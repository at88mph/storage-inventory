swagger: '2.0'
info:
  version: 2.1.0
  title: VOSpace
  description: |
    The CANFAR Vault web service, a VOSpace storage implementation.

    VOSpace is the IVOA (International Virtual Observatory Aliance) standard interface to distributed storage.  This VOSpace web service is an access point for a distributed storage network.  There are three main functions of the VOSpace service:
    1. Add, replace, or delete data objects in a tree data structure.
    2. Manipulate the metadata for the data objects.
    3. Obtain URIs through which the content of the data objects can be accessed.

    Please see the specification for full details: <a href="http://ivoa.net/documents/VOSpace" target="_blank">VOSpace 2.1 Specification</a>

    Interaction with the synchronous and asynchronous data object transfer endpoints use the job management patterns defined in the IVOA Universal Worker Service (UWS) specification: <a href="http://www.ivoa.net/documents/UWS" target="_blank">UWS 1.1 Specification</a>
schemes:
  - https
basePath: /vault
paths:
  /files/{filePath}:

    get:
      description: |
        Get the specified file.
      tags:
        - Files
      responses:
        '200':
          description: Successful response
        '400':
          description: If the user requested a container node (directory).
        '403':
          description: If the user does not have permission.
        '404':
          description: If the file or part of the path to the file could not be found.
        '500':
          description: Internal error
        '503':
          description: Service busy
        default:
          description: Unexpected error
    head:
      description: |
        Get the metadata of the specified file.
      tags:
        - Files
      responses:
        '200':
          description: Successful response
        '400':
          description: If the user requested a container node (directory).
        '403':
          description: If the user does not have permission.
        '404':
          description: If the file or part of the path to the file could not be found.
        '500':
          description: Internal error
        '503':
          description: Service busy
        default:
          description: Unexpected error

  /nodes/{nodePath}:
    put:
      description: |
        Create a new node at a specified location
      tags:
        - Nodes
      consumes:
        - text/xml
      responses:
        '200':
          description: Successful response
        '201':
          description: Successful response
        '403':
          description: If the user does not have permission.
        '404':
          description: If the path to the node could not be found.
        '409':
          description: If the node already exits.
        '500':
          description: Internal error
        '503':
          description: Service busy
        default:
          description: Unexpeced error
          schema:
            $ref: '#/definitions/Error'
      parameters:
        - name: Node
          in: body
          description: The new Node
          required: true
          schema:
            $ref: '#/definitions/Node'
    delete:
      description: |
        Delete a node. When the target is a ContainerNode, all its children (the contents of the container) SHALL also be deleted.
      tags:
        - Nodes
      responses:
        '200':
          description: Successful response
        '204':
          description: Successful response
        '403':
          description: If the user does not have permission.
        '404':
          description: If the path to the node could not be found.
        '500':
          description: Internal error
        '503':
          description: Service busy
        default:
          description: Unexpeced error
          schema:
            $ref: '#/definitions/Error'
    get:
      description: |
        Get the details for a specific Node.
      tags:
        - Nodes
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Node'
        '403':
          description: If the user does not have permission.
        '404':
          description: If the path to the node could not be found.
        '500':
          description: Internal error
        '503':
          description: Service busy
        default:
          description: Unexpeced error
          schema:
            $ref: '#/definitions/Error'
      parameters:
        - name: detail
          in: query
          description: set the node detail level
          required: false
          type: string
          enum:
            - min
            - max
            - properties
        - name: uri
          in: query
          description: for container nodes, the uri of a child node of the container on which to start the list of children.
          required: false
          type: string
        - name: limit
          in: query
          description: for container nodes, the number of children to return.
          required: false
          type: string
        - name: view
          in: query
          description: for data nodes, a specific view
          required: false
          type: string
          enum:
            - data
    post:
      description: |
        Set the property values for a specific Node
      tags:
        - Nodes
      consumes:
        - text/xml
      responses:
        '200':
          description: Successful response
        '201':
          description: Successful response
        '403':
          description: If the user does not have permission.
        '404':
          description: If the path to the node could not be found.
        '500':
          description: Internal error
        '503':
          description: Service busy
        default:
          description: Unexpeced error
          schema:
            $ref: '#/definitions/Error'
      parameters:
        - name: Node
          in: body
          description: The updated Node
          required: true
          schema:
            $ref: '#/definitions/Node'
    parameters:
      - name: nodePath
        in: path
        description: The path for the node
        required: true
        type: string
  /recursiveDelete:
    post:
      description: |
        Post a recursive delete command. This is an IVOA UWS end point.
      tags:
        - Recursive delete
      consumes:
        - None
      responses:
        '200':
          description: Successful response
        '201':
          description: Successful response
        '403':
          description: If the user does not have permission.
        '404':
          description: If the source node could not be found.
        '409':
          description: If the destination node already exists.
        '500':
          description: Internal error
        '503':
          description: Service busy
        default:
          description: Unexpeced error
          schema:
            $ref: '#/definitions/Error'
      parameters:
        - name: nodeURI
          in: query
          description: The base node (typically a container) to recursively delete
          required: true
          type: string
          format: uri
  /availability:
    get:
      tags:
        - Support Interfaces
      summary: VOSI Availability
      description: Indicates whether the service is operable and shows the reliability of the service for extended and scheduled requests. If the query parameter 'detail=min' is used, a light weight heart beat test will be performed. The heart beat test returns status 200 if the service is available.
      parameters:
        - name: detail
          in: query
          description: specifies heart beat to be used to check for availability of this service, the value 'min' must be used, otherwise the full availability test will be performed
          required: false
          type: string
      responses:
        '200':
          description: A VOSI availability document in XML.
          schema:
            $ref: '#/definitions/availability'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /capabilities:
    get:
      summary: VOSI Capabilities
      tags:
        - Support Interfaces
      description: |
        Provides the service metadata in the form of a list of Capability descriptions.  Each of these descriptions is an 
        XML element that:
        <ul>
        <li>states that the service provides a particular, IVOA-standard function;</li>
        <li>lists the interfaces for invoking that function;</li>
        <li>records any details of the implementation of the function that are not defined as default or constant in the standard for that function.</li>
        </ul>
      responses:
        '200':
          description: A VOSI Capabilities document in XML.
          schema:
            $ref: '#/definitions/capabilities'
        '500':
          description: Internal server error
        '503':
          description: Service too busy
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
definitions:
  Property:
    type: object
    required:
      - uri
    description: The property identifier
    properties:
      uri:
        type: string
        format: uri
  View:
    type: object
    required:
      - uri
    description: The view identifier
    properties:
      uri:
        type: string
        format: uri
  Protocol:
    type: object
    required:
      - uri
    description: The protocol identifier
    properties:
      uri:
        type: string
        format: uri
  Node:
    type: object
    required:
      - uri
    description: The node identifier
    properties:
      uri:
        type: string
        format: uri
  Transfer:
    type: object
    required:
      - target
      - direction
      - protocol
    description: The transfer negotiation document
    properties:
      target:
        type: string
        format: uri
      direction:
        type: string
      protocol:
        type: string
        format: uri
  availability:
    type: object
    xml:
      name: availability
      namespace: http://www.ivoa.net/xml/VOSIAvailability/v1.0
      prefix: vosi
    properties:
      available:
        type: boolean
        xml:
          attribute: true
          prefix: vosi
      note:
        type: string
        xml:
          attribute: true
          prefix: vosi
  capabilities:
    type: array
    items:
      $ref: '#/definitions/capability'
    xml:
      namespace: http://www.ivoa.net/xml/VOSICapabilities/v1.0
      prefix: vosi
      wrapped: true
  capability:
    type: object
    properties:
      standardID:
        type: string
        format: uri
        xml:
          attribute: true
      interface:
        type: object
        properties:
          accessURL:
            type: string
            properties:
              use:
                type: string
                xml:
                  attribute: true
          securityMethod:
            type: string
            properties:
              standardID:
                type: string
                format: uri
                xml:
                  attribute: true
  Error:
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
